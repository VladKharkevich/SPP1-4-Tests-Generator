using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GeneratorTestClassesLib
{
    public class GeneratorTestClasses
    {
        static public List<string> Start(string text)
        {
            var tree = SyntaxFactory.ParseSyntaxTree(text);
            var root = tree.GetCompilationUnitRoot();
            int countOfClasses = GetCountOfClasses(root);
            List<string> codes = new List<string>();
            for (int i = 0; i < countOfClasses; i++)
            {
                var syntaxFactory = SyntaxFactory.CompilationUnit();
                syntaxFactory = syntaxFactory.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Microsoft.VisualStudio.TestTools.UnitTesting")));
                int temp = i;
                syntaxFactory = AddNode(root, syntaxFactory, ref temp);
                var code = syntaxFactory.NormalizeWhitespace().ToFullString();
                codes.Add(code);
            }
            return codes;
        }

        static private int GetCountOfClasses(dynamic originalMember)
        {
            int i = 0;
            foreach (var member in originalMember.Members)
            {
                if (member.GetType() == typeof(NamespaceDeclarationSyntax))
                {
                    i += GetCountOfClasses(member);
                }
                else if (member.GetType() == typeof(ClassDeclarationSyntax))
                {
                    i++;
                }
            }
            return i;
        }

        static private dynamic AddNode(dynamic originalMember, dynamic generatedMember, ref int i)
        {
            foreach (var member in originalMember.Members)
            {
                if (member.GetType() == typeof(NamespaceDeclarationSyntax))
                {
                    NamespaceDeclarationSyntax namMember = (NamespaceDeclarationSyntax)member;
                    var myNamespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(namMember.Name + ".Tests")).NormalizeWhitespace();
                    myNamespace = AddNode(member, myNamespace, ref i);
                    if (myNamespace.Members.Count > 0)
                    {
                        if (generatedMember.GetType() == typeof(NamespaceDeclarationSyntax))
                            generatedMember = myNamespace;
                        else
                            generatedMember = generatedMember.AddMembers(myNamespace);
                    }   
                }
                else if (member.GetType() == typeof(ClassDeclarationSyntax))
                {
                    if (i == 0)
                    {
                        ClassDeclarationSyntax clsMember = (ClassDeclarationSyntax)member;
                        var myClass = SyntaxFactory.ClassDeclaration(clsMember.Identifier + "Tests");
                        myClass = myClass.AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));
                        myClass = myClass.AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestClass")))));
                        myClass = AddNode(member, myClass, ref i);
                        generatedMember = generatedMember.AddMembers(myClass);
                    }
                    i -= 1;
                }
                else if (member.GetType() == typeof(MethodDeclarationSyntax))
                {
                    MethodDeclarationSyntax mthMember = (MethodDeclarationSyntax)member;
                    if (mthMember.Modifiers.Any((modifier) => modifier.IsKind(SyntaxKind.PublicKeyword)))
                    {
                        var syntax = SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");");
                        var myMethod = SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), "Test" + mthMember.Identifier)
                                 .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                                 .WithBody(SyntaxFactory.Block(syntax));
                        myMethod = myMethod.AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestMethod")))));
                        generatedMember = generatedMember.AddMembers(myMethod);
                    }
                }
            }
            return generatedMember;
        }
    }
}
